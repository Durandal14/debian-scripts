#!/bin/bash
# ---------------------------------------------------
#  MQTT gateway for Heatzy pilot devices
#
# Revision history :
#   10/02/2019, V1.0 - Creation by Nicolas Bernaerts
#   20/02/2019, V1.1 - Add --verbose and name topic
# ---------------------------------------------------

# -----------------------
#   User configuration
# -----------------------

# Heatzy state refresh cycle (in seconds)
HEATZY_REFRESH=180

# Heatzy account
HEATZY_LOGIN="your-heatzy-login"
HEATZY_PASSWORD="your-heatzy-password"

# MQTT account
MQTT_HOST="your-mqtt-host"
MQTT_PORT=""
MQTT_LOGIN="your-mqtt-login"
MQTT_PASSWORD="your-mqtt-password"
MQTT_QOS="0"
MQTT_TOPIC="your/mqtt/topic"
ARR_MQTT_OPTION=( )

# --------------------
#  Help and Controls
# --------------------

# if no argument, display help
if [ $# -eq 0 ] 
then
	echo "Gateway to expose Heatzy and Pilote2 devices thru a MQTT server"
	echo "Parameters are :"
	echo "  --start      Start the gateway"
	echo "  --stop       Stop the gateway"
	echo "  --verbose   Display state updates"
	echo "MQTT topics are :"
	echo "  list of devices     = ${MQTT_TOPIC}/list"
	echo "  set state of device = ${MQTT_TOPIC}/<DID>/command"
	echo "  get state of device = ${MQTT_TOPIC}/<DID>/state"
	echo "  get name of device  = ${MQTT_TOPIC}/<DID>/name"
	echo "MQTT states and command are numeric values :"
	echo "  0=offline 1=off 2=comfort 3=eco 4=frost"
	exit 1
fi

# loop to retrieve arguments
while test $# -gt 0
do
	case "$1" in
	"--start")   ACTION="start"; shift; ;;
	"--stop")    ACTION="stop"; shift; ;;
	"--verbose") VERBOSE="ok"; shift; ;;
	*) echo "[warning] Parameter $1 ignored"; shift; ;;
	esac
done

# controls
[ "${HEATZY_LOGIN}" = "" -o "${HEATZY_PASSWORD}" = "" ] && { echo "[error] Heatzy username or password not defined"; exit 1; }
[ "${MQTT_HOST}" = "" ] && { echo "[error] MQTT server not defined"; exit 1; }
[ "${MQTT_TOPIC}" = "" ] && { echo "[error] MQTT topic root not defined"; exit 1; }

# ------------------
#   Initialisation
# ------------------

# Heatzy technical data
HEATZY_TOKEN="null"
HEATZY_APPID="c70a66ff039d41b4a220e198b0fcc8b3"

# State codes
ARR_STATE=( "0;offline" "1;off" "2;comfort" "3;eco" "4;frost" )

# Heatzy Gen 1 commands
ARR_GET_HEATZY=( "1;u505cu6b62" "2;u8212u9002" "3;u7ecfu6d4e" "4;u89e3u51bb" )
ARR_SET_HEATZY=( "1;[1,1,3]" "2;[1,1,0]" "3;[1,1,1]" "4;[1,1,2]" )

# Heatzy Gen 2 commands
ARR_GET_PILOTE2=( "1;stop" "2;cft" "3;eco" "4;fro" )
ARR_SET_PILOTE2=( "1;stop" "2;cft" "3;eco" "4;fro" )

# MQTT options
ARR_MQTT_OPTION=( "${ARR_MQTT_OPTION[@]}" "--host" "${MQTT_HOST}" )
[ "${MQTT_PORT}" != "" ] && ARR_MQTT_OPTION=( "${ARR_MQTT_OPTION[@]}" "--port" "${MQTT_PORT}" )
[ "${MQTT_QOS}" != "" ] && ARR_MQTT_OPTION=( "${ARR_MQTT_OPTION[@]}" "--qos" "${MQTT_QOS}" )
[ "${MQTT_LOGIN}" != "" ] && ARR_MQTT_OPTION=( "${ARR_MQTT_OPTION[@]}" "--username" "${MQTT_LOGIN}" )
[ "${MQTT_PASSWORD}" != "" ] && ARR_MQTT_OPTION=( "${ARR_MQTT_OPTION[@]}" "--pw" "${MQTT_PASSWORD}" )

# temporary files
TMP_DIR="/tmp/heatzy-mqtt-gateway"
TMP_FIFO="${TMP_DIR}/fifo.csv"
TMP_JSON="${TMP_DIR}/data.json"
TMP_DATA="${TMP_DIR}/data.csv"

# PID file
RUN_PID="/var/run/heatzy-mqtt-gateway.pid"

# create environment
[ ! -d "${TMP_DIR}" ] && mkdir --parents "${TMP_DIR}"
[ ! -p "${TMP_FIFO}" ] && mkfifo "${TMP_FIFO}"

# --------------------
#   Heatzy functions
# --------------------

heatzy_authenticate ()
{
	# new token
	HEATZY_TOKEN="null"

	# authentification command
	ARR_PARAM=( "--silent" "-X" "POST" "--header" "Content-Type: application/json" "--header" "Accept: application/json" "--header" "X-Gizwits-Application-Id: ${HEATZY_APPID}" )
	curl "${ARR_PARAM[@]}" -d '{"username":"'${HEATZY_LOGIN}'","password":"'${HEATZY_PASSWORD}'","lang":"en"}' "https://euapi.gizwits.com/app/login" > "${TMP_JSON}"

	# check authentification error
	HEATZY_ERROR=$(cat "${TMP_JSON}" | grep "error_message" | sed "s/^.*[{,\" ]error_message[\": ]*\([^\",}]*\).*$/\1/")

	# if authentification error
	[ "${HEATZY_ERROR}" != "" ] && echo "[error] ${HEATZY_ERROR}" || HEATZY_TOKEN=$(cat "${TMP_JSON}" | tr -d '"{} ' | tr "," "\n" | grep "token" | cut -d':' -f2)
}

heatzy_command ()
{
	# first trial
	curl --silent "--header" "X-Gizwits-User-token: ${HEATZY_TOKEN}" "$@" > "${TMP_JSON}"

	# check for invalid token
	TOKEN_INVALID=$(grep "token" "${TMP_JSON}")

	# if invalid token,
	if [ "${TOKEN_INVALID}" != "" ]
	then
		# send new authentification
		heatzy_authenticate

		# second trial
		curl --silent "--header" "X-Gizwits-User-token: ${HEATZY_TOKEN}" "$@" > "${TMP_JSON}"
	fi
}

# -----------------
#  Service stop
# -----------------

if [ "${ACTION}" = "stop" ]
then
	# kill any previous gateway process
	pkill -f "heatzy-mqtt-gateway --start"

	# kill any previous subscriber
	pkill -f "mosquitto_sub --host ${MQTT_HOST}"

	# remove running flag
	rm -f "${RUN_PID}"
fi

# -----------------
#  Service start
# -----------------

# service already running
if [ "${ACTION}" = "start" -a -f "${RUN_PID}" ]
then
	# error message
	echo "[error] Gateway service already running"

# else, start the gateway
elif [ "${ACTION}" = "start" ]
then
	# declare running flag
	echo "${BASHPID}" > "${RUN_PID}"

	# start subscriber to listen to set state commands and send result to the fifo
	mosquitto_sub "${ARR_MQTT_OPTION[@]}" "--verbose" "--topic" "${MQTT_TOPIC}/+/command" >> "${TMP_FIFO}" &

	# send a first update command
	echo "update" >> "${TMP_FIFO}" &

	# ---------------------
	#  loop to empty fifo
	# ---------------------

	while read LINE < "${TMP_FIFO}"
	do
		# display line
		echo "[process] ${LINE}"

		# if update from server
		if [ "${LINE}" = "update" ]
		then
			# initialisation
			ARR_DID=( )

			# plan next update
			{ sleep "${HEATZY_REFRESH}"; echo "update" >> "${TMP_FIFO}"; } &

			# send list of devices command
			ARR_PARAM=( "-X" "GET" "--header" "Accept:application/json" "--header" "X-Gizwits-Application-Id: ${HEATZY_APPID}" )
			heatzy_command "${ARR_PARAM[@]}" "https://euapi.gizwits.com/app/bindings"

			# extract list of devices from JSON (one line per device)
			cat "${TMP_JSON}" | tr '{' '\n' | grep "dev_alias" > "${TMP_DATA}"

			# loop thru list of devices
			while read DEVICE
			do
				# initialisation
				STATE="0"

				# extract device DID and alias
				DID=$(echo "${DEVICE}" | sed "s/^.*[{,\" ]did[\": ]*\([^\",}]*\).*$/\1/")
				ALIAS=$(echo "${DEVICE}" | sed "s/^.*[{,\" ]dev_alias[\": ]*\([^\",}]*\).*$/\1/")

				# add to devices array
				ARR_DID=( "${ARR_DID[@]}" "${DID}" )

				# send online state command
				ARR_PARAM=( "-X" "GET" "--header" "Accept: application/json" "--header" "X-Gizwits-Application-Id: ${HEATZY_APPID}" )
				heatzy_command "${ARR_PARAM[@]}" "https://euapi.gizwits.com/app/devices/${DID}"

				# if device is online
				IS_ONLINE=$(cat "${TMP_JSON}" | sed "s/^.*[{,\" ]is_online[\": ]*\([^\",}]*\).*$/\1/")
				if [ "${IS_ONLINE}" = "true" ]
				then
					# get product type
					PRODUCT=$(cat "${TMP_JSON}" | sed "s/^.*[{,\" ]product_name[\": ]*\([^\",}]*\).*$/\1/")

					# send status command
					ARR_PARAM=( "-X" "GET" "--header" "Accept: application/json" "--header" "X-Gizwits-Application-Id: ${HEATZY_APPID}" )
					heatzy_command "${ARR_PARAM[@]}" "https://euapi.gizwits.com/app/devdata/${DID}/latest"

					# extract state string
					RESULT=$(cat "${TMP_JSON}" | sed "s|^.*[{,\" ]mode[\": ]*\([^\",}]*\).*$|\1|")

					# heatzy pilot gen1
					[ "${PRODUCT}" = "Heatzy" ] && STATE=$(echo "${ARR_GET_HEATZY[@]}" | tr ' ' '\n' | grep ";${RESULT}$" | cut -d';' -f1)
					[ "${PRODUCT}" = "Pilote2" ] && STATE=$(echo "${ARR_GET_PILOTE2[@]}" | tr ' ' '\n' | grep ";${RESULT}$" | cut -d';' -f1)

					# if state is null, declare offline
					[ "${STATE}" = "(null)" ] && STATE="0"
				fi

				# publish mqtt name and state
				mosquitto_pub "${ARR_MQTT_OPTION[@]}" "--topic" "${MQTT_TOPIC}/${DID}/state" "--message" "${STATE}"
				mosquitto_pub "${ARR_MQTT_OPTION[@]}" "--topic" "${MQTT_TOPIC}/${DID}/name" "--message" "${ALIAS}"

				# display
				[ "${VERBOSE}" = "ok" ] && echo "${DID} [${PRODUCT} - ${STATE}]"
			done < "${TMP_DATA}"

			# publish mqtt devices list separated by ';'
			MESSAGE=$(echo ${ARR_DID[@]} | tr ' ' ';')
			[ "${MESSAGE}" = "" ] && MESSAGE="none"
			mosquitto_pub "${ARR_MQTT_OPTION[@]}" "--topic" "${MQTT_TOPIC}/list" "--message" "${MESSAGE}"

		# else, deal with command
		else
			# extract DID and state
			DID=$(echo "${LINE}" | sed "s|^.*\/\([^\/]*\)\/command.*$|\1|")
			STATE=$(echo "${LINE}" | sed "s|^.*command[^0-9]*\([0-9]\)$|\1|")

			# send online state command
			ARR_PARAM=( "-X" "GET" "--header" "Accept: application/json" "--header" "X-Gizwits-Application-Id: ${HEATZY_APPID}" )
			heatzy_command "${ARR_PARAM[@]}" "https://euapi.gizwits.com/app/devices/${DID}"

			# check if device is online
			IS_ONLINE=$(cat "${TMP_JSON}" | sed "s/^.*[{,\" ]is_online[\": ]*\([^\",}]*\).*$/\1/")

			# device offline
			if [ "${IS_ONLINE}" != "true" ]
			then
				# state is offline
				STATE=0

			# device online
			else
				# get product type
				PRODUCT=$(cat "${TMP_JSON}" | sed "s/^.*[{,\" ]product_name[\": ]*\([^\",}]*\).*$/\1/")

				# command for Heatzy product (gen 1)
				if [ "${PRODUCT}" = "Heatzy" ]
				then
					STRING=$(echo "${ARR_SET_HEATZY[@]}" | tr " " "\n" | grep "^${STATE};" | cut -d';' -f2)
					ARR_COMMAND=( "-d" "{\"raw\":${STRING}}" )

				# command for Pilote2 product (gen 2)
				elif [ "${PRODUCT}" = "Pilote2" ]
				then
					STRING=$(echo "${ARR_SET_PILOTE2[@]}" | tr " " "\n" | grep "^${STATE};" | cut -d';' -f2)
					ARR_COMMAND=( "-d" "{\"attrs\":{\"mode\":\"${STRING}\"}}" )
				fi
				
				# send update command
				ARR_PARAM=( "-X" "POST" "--header" "Accept: application/json" "--header" "Content-Type: application/json" )
				ARR_PARAM=( "${ARR_PARAM[@]}" "--header" "X-Gizwits-Application-Id: ${HEATZY_APPID}" )
				heatzy_command "${ARR_PARAM[@]}" "${ARR_COMMAND[@]}" "https://euapi.gizwits.com/app/control/${DID}"
			fi

			# publish mqtt state
			mosquitto_pub "${ARR_MQTT_OPTION[@]}" "--topic" "${MQTT_TOPIC}/${DID}/state" "--message" "${STATE}"
		fi
	done
fi
