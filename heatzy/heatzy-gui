#!/bin/bash
# ---------------------------------------------------
# GUI to manage Heatzy pilote devices
#
# Revision history :
#   27/11/2018, V1.0 - Creation by Nicolas Bernaerts
#   30/11/2018, V1.1 - Update and infinite loop
#   02/02/2019, V1.2 - Rewrite due to heatzy modifications
# ---------------------------------------------------

# ------------
#   Controls
# ------------

# check tools availability
command -v yad >/dev/null 2>&1 || { zenity --error --text="Please install yad"; exit 1; }
command -v heatzy >/dev/null 2>&1 || { zenity --error --text="Please install heatzy script"; exit 1; }

# start progression dialog box
(
echo "#Retreiving Heatzy devices condition"

# display loop flag
CONTINUE="ok"

# ----------------------
#   Update device list
# ----------------------

# read list of states
ARR_STATE=( $(heatzy --list-state) )

# update devices list
ARR_DEVICE=( $(heatzy --update-device) )

# check for login error
ERROR=$(echo "${ARR_DEVICE[@]}" | grep "\[error\]")

# if error, ask for login and password
if [ "${ERROR}" != "" ]
then
	# ask for login and password
	ANSWER=$(yad --center --width 400 --separator='#' --window-icon "/usr/share/icons/heatzy-pilote.png" --image "heatzy-pilote" \
		--title "Heatzy pilote initialisation" --text "You first need to enter your Heatzy account login and password" \
		--form --field="Login" "" --field="Password:H" "" )

	# if cancel, exit
	if [ "${ANSWER}" != "" ]
	then
		# extract login and password
		HEATZY_LOGIN=$(echo "${ANSWER}" | cut -d'#' -f1)
		HEATZY_PASSW=$(echo "${ANSWER}" | cut -d'#' -f2)

		# heatzy login attempt
		if [ "${HEATZY_LOGIN}" != "" -a "${HEATZY_PASSW}" != "" ]
		then
			# update devices list
			ARR_DEVICE=( $(heatzy --update-device --login "${HEATZY_LOGIN}" --password "${HEATZY_PASSW}") )

			# check for login error
			ERROR=$(echo "${ARR_DEVICE[@]}" | grep "[error] username or password")
		fi

		# if token still ndefined,
		if [ "${ERROR}" != "" ]
		then
			# login failed
			zenity --error --title="Heatzy pilote" --text="Login failed to Heatzy server\nCheck your login and password"

			# exit
			CONTINUE="ko"
		fi
	else
		# exit
		CONTINUE="ko"
	fi
fi

# if everything is ok, loop to display dialog box
if [ "${CONTINUE}" = "ok" ]
then
	# initialise current array of current states
	ARR_CURRENT=( )

	# set default dialog box params
	ARR_PARAM=( "--title" "Heatzy pilote management" "--text" "\nSet the state of your Heatzy pilote devices\n" )
	ARR_PARAM=( "${ARR_PARAM[@]}" "--window-icon" "/usr/share/icons/heatzy-pilote.png" "--image" "heatzy-pilote" )
	ARR_PARAM=( "${ARR_PARAM[@]}" "--button=gtk-cancel:1" "--button=gtk-ok:0" "--form" )

	# loop thru devices
	for DEVICE_DID in "${ARR_DEVICE[@]}"           
	do
		# read device alias
		DEVICE_ALIAS=$(heatzy --get-alias "${DEVICE_DID}")

		# read device state
		DEVICE_STATE=$(heatzy --get-state "${DEVICE_DID}")
		ARR_CURRENT=( "${ARR_CURRENT[@]}" "${DEVICE_STATE}" )

		# setup control to display
		if [ "${DEVICE_STATE}" = "offline" ]
		then
			# device state and control
			STATE="${DEVICE_STATE}"
			CONTROL="RO"
		else
			# device state and control
			STATE=$(echo "${ARR_STATE[@]}" | tr ' ' '#' | sed "s/${DEVICE_STATE}/^${DEVICE_STATE}/")
			CONTROL="CB"
		fi

		# add dialog box parameters for device
		ARR_PARAM=( "${ARR_PARAM[@]}" "--field=${DEVICE_ALIAS} :${CONTROL}" "${STATE}" )
	done

	# close progress dialog
	echo 100

	# display dialog box
	YAD_RESULT=$(yad --center --width 400 --separator='#' --item-separator='#' "${ARR_PARAM[@]}")
	DIALOG_CHOICE=$?

	# get button selected
	if [ "${DIALOG_CHOICE}" = "0" ]
	then
		# explode result into array
		ARR_NEW=( $(echo "${YAD_RESULT}" | tr '#' ' ') )

		# loop thru devices
		for ((i=0; i < ${#ARR_DEVICE[@]}; i++))
		do
			# if device has changed state,
			if [ "${ARR_NEW[$i]}" != "${ARR_CURRENT[$i]}" ]
			then
				# send command
				heatzy --set-state "${ARR_DEVICE[$i]}" "${ARR_NEW[$i]}"

				# send notification
				ALIAS=$(heatzy --get-alias "${ARR_DEVICE[$i]}")
				zenity --notification --text "${ALIAS} set to ${ARR_NEW[$i]}" "--window-icon=heatzy-pilote"
			fi
		done
	fi
fi

# close progress dialog
echo 100
) | yad --progress --width 380 --center --window-icon "/usr/share/icons/heatzy-pilote.png" --image "heatzy-pilote" --no-buttons --undecorated --pulsate --auto-close
