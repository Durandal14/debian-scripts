#!/bin/bash
# ---------------------------------------------------
# GUI to manage Heatzy pilote devices
#
# Revision history :
#   27/11/2018, V1.0 - Creation by Nicolas Bernaerts
#   30/11/2018, V1.1 - Update and infinite loop
#   02/02/2019, V1.2 - Rewrite due to heatzy script modifications
# ---------------------------------------------------

# ------------
#   Controls
# ------------

# check tools availability
command -v yad >/dev/null 2>&1 || { zenity --error --text="Please install yad"; exit 1; }
command -v heatzy >/dev/null 2>&1 || { zenity --error --text="Please install heatzy script"; exit 1; }

# temporary file
TMP_DIR=$(mktemp --tmpdir -d "heatzy-gui-XXXXXXXX")
TMP_STATE="${TMP_DIR}/state.list"
TMP_ORIGINAL="${TMP_DIR}/original.list"

# start progression dialog box
(
echo "#Retreiving Heatzy devices condition"

# display loop flag
CONTINUE="ok"

# ----------------------
#   Update device list
# ----------------------

# read list of states
heatzy --list-state > "${TMP_STATE}"

# update devices list
ARR_DID=( $(heatzy --update-device) )

# check for login error
ERROR=$(echo "${ARR_DID[@]}" | grep "\[error\]")

# if error, ask for login and password
if [ "${ERROR}" != "" ]
then
	# ask for login and password
	ANSWER=$(yad --center --width 400 --separator='#' --window-icon "/usr/share/icons/smart-heater.png" --image "heatzy" \
		--title "Heatzy pilote initialisation" --text "You first need to enter your Heatzy account login and password" \
		--form --field="Login" "" --field="Password:H" "" )

	# if cancel, exit
	if [ "${ANSWER}" != "" ]
	then
		# extract login and password
		HEATZY_LOGIN=$(echo "${ANSWER}" | cut -d'#' -f1)
		HEATZY_PASSW=$(echo "${ANSWER}" | cut -d'#' -f2)

		# heatzy login attempt
		if [ "${HEATZY_LOGIN}" != "" -a "${HEATZY_PASSW}" != "" ]
		then
			# update devices list
			ARR_DID=( $(heatzy --update-device --login "${HEATZY_LOGIN}" --password "${HEATZY_PASSW}") )

			# check for login error
			ERROR=$(echo "${ARR_DID[@]}" | grep "\[error\]")
		fi

		# if token still ndefined,
		if [ "${ERROR}" != "" ]
		then
			# login failed
			zenity --error --title="Heatzy pilote" --text="Login failed to Heatzy server\nCheck your login and password"

			# exit
			CONTINUE="ko"
		fi
	else
		# exit
		CONTINUE="ko"
	fi
fi

# if everything is ok, loop to display dialog box
if [ "${CONTINUE}" = "ok" ]
then
	# set default dialog box params
	ARR_PARAM=( "--title" "Heatzy pilote management" "--text" "\nSet the state of your Heatzy pilote devices\n" )
	ARR_PARAM=( "${ARR_PARAM[@]}" "--window-icon" "/usr/share/icons/smart-heater.png" "--image" "heatzy" )
	ARR_PARAM=( "${ARR_PARAM[@]}" "--button=gtk-cancel:1" "--button=gtk-ok:0" "--form" )

	# loop thru devices
	INDEX=0
	for DID in "${ARR_DID[@]}"           
	do
		# read device state
		STATE=$(heatzy --get-state "${DID}")
		LABEL=$(grep "^${STATE};" "${TMP_STATE}" | cut -d';' -f2)

		# read device alias
		ALIAS=$(heatzy --get-alias "${DID}")

		# setup control to display
		if [ "${STATE}" = "offline" ]
		then
			# control is read only
			CONTROL="RO"

			# device state
			SELECTION="Off line"
		else
			# control is a combo box
			CONTROL="CB"

			# device state label with default selected
			SELECTION=$(cat "${TMP_STATE}" | tr '\n' '#' | sed "s|${STATE}|^${STATE}|" | sed -e "s|[^#\^]*;||g" -e "s|#$||")
		fi

		# add dialog box parameters for device
		ARR_PARAM=( "${ARR_PARAM[@]}" "--field=${ALIAS} :${CONTROL}" "${SELECTION}" )

		# save current state
		echo "${INDEX};${DID};${ALIAS};${LABEL}" >> "${TMP_ORIGINAL}"

		# increment counter
		INDEX=$((INDEX+1))
	done

	# close progress dialog
	echo 100

	# display dialog box
	YAD_RESULT=$(yad --center --width 400 --separator='#' --item-separator='#' "${ARR_PARAM[@]}")
	DIALOG_CHOICE=$?

	# get button selected
	if [ "${DIALOG_CHOICE}" = "0" ]
	then
		# explode result into array
		IFS=$'\n'; ARR_CHOICE=( $(echo "${YAD_RESULT}" | tr '#' '\n') )

		# loop thru devices
		for ((INDEX=0; INDEX < ${#ARR_CHOICE[@]}; INDEX++))
		do
			# get previous state
			DEVICE=$(grep "^${INDEX};" "${TMP_ORIGINAL}")
			DID=$(echo "${DEVICE}" | cut -d';' -f2)
			ALIAS=$(echo "${DEVICE}" | cut -d';' -f3)
			LABEL=$(echo "${DEVICE}" | cut -d';' -f4)
 
			# if device has changed state,
			if [ "${LABEL}" != "${ARR_CHOICE[${INDEX}]}" ]
			then
				# convert label to state
				STATE=$(grep ";${LABEL}$" "${TMP_STATE}" | cut -d';' -f1)

				# send command
				heatzy --set-state "${DID}" "${STATE}"

				# send notification
				zenity --notification --text "${ALIAS} set to ${ARR_CHOICE[${INDEX}]}" "--window-icon=heatzy-pilote"
			fi
		done
	fi
fi

# close progress dialog
echo 100
) | yad --progress --width 380 --center --window-icon "/usr/share/icons/smart-heater.png" --image "heatzy" --no-buttons --undecorated --pulsate --auto-close

# cleanup
rm -r "${TMP_DIR}"
